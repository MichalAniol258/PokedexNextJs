{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ramia/Documents/Projekty/PokedexNextJs/my-app/src/utils/supabase/server.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n    const cookieStore = await cookies()\n\n    return createServerClient(\n        process.env.NEXT_PUBLIC_SUPABASE_URL!,\n        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n        {\n            cookies: {\n                getAll() {\n                    return cookieStore.getAll()\n                },\n                setAll(cookiesToSet) {\n                    try {\n                        cookiesToSet.forEach(({ name, value, options }) =>\n                            cookieStore.set(name, value, options)\n                        )\n                    } catch {\n                        // The `setAll` method was called from a Server Component.\n                        // This can be ignored if you have middleware refreshing\n                        // user sessions.\n                    }\n                },\n            },\n        }\n    )\n}"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAEO,eAAe;IAClB,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGpB;QACI,SAAS;YACL;gBACI,OAAO,YAAY,MAAM;YAC7B;YACA,QAAO,YAAY;gBACf,IAAI;oBACA,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC1C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAErC,EAAE,OAAM;gBACJ,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACrB;YACJ;QACJ;IACJ;AAER","debugId":null}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ramia/Documents/Projekty/PokedexNextJs/my-app/src/app/api/analyze/route.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { GoogleAIFileManager } from \"@google/generative-ai/server\";\nimport { NextRequest } from \"next/server\";\nimport { createClient } from '@/utils/supabase/server'; // Import your existing Supabase server client\n\nexport async function POST(request: NextRequest) {\n    try {\n        // Get the current user from the Supabase session\n        const supabase = await createClient();\n        const { data: { user }, error: authError } = await supabase.auth.getUser();\n\n        if (authError || !user) {\n            console.error('Error fetching user:', authError);\n            return new Response('Unauthorized', { status: 401 });\n        }\n\n        const userId = user.id; // Get the current user's ID\n\n        // Get the image file from the request body\n        const formData = await request.formData();\n        const file: any = formData.get('image');\n\n        // Check if a file is uploaded\n        if (!file) {\n            console.log('no file!');\n            return new Response('No file uploaded', { status: 400 });\n        }\n\n        // Convert the file to a buffer\n        const fileBuffer = Buffer.from(await file.arrayBuffer());\n\n        // Create the Google AI file manager and generative AI instance\n        const fileManager = new GoogleAIFileManager(process.env.API_KEY as string);\n        const genAI = new GoogleGenerativeAI(process.env.API_KEY as string);\n        console.log(\"smt!\");\n\n        // Upload the file to Google Cloud Storage and get the URI\n        const fileUri = await fileManager.uploadFile(fileBuffer, {\n            mimeType: file.type,\n            displayName: file.name,\n        });\n\n        // Use the Gemini AI model to generate a description\n        const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });\n        const result = await model.generateContent([\n            'Need recognize a Pokémon based on image. I want you to give me VALID JSON FORMAT. There must be NO Comments in the object!!!' +\n            \"If you recognize a someone or something that is not pokemon give me response:\" +\n            'Your response should look something like this:' +\n            '{isPokemon: true/false,' +\n            'description: description of the pokemon,' +\n            'name: give me name of the pokemon if detected,' +\n            'pokedex_code: number of the pokemon in pokedex like #0001,' +\n            'weakness:list of weakness,' +\n            'type:type of pokemon,' +\n            'properties:{height:height of pokemon,category:category of pokemon,weight:weight of pokemon,' +\n            'abilities:abilities of pokemon display it in string like ability1/ability2/ability3,Gender:gender of the pokemon}}',\n            {\n                fileData: {\n                    fileUri: fileUri.file.uri,\n                    mimeType: fileUri.file.mimeType,\n                },\n            },\n        ]);\n\n        //@ts-ignore\n        const res: any = result?.response?.candidates[0]?.content?.parts[0]?.text;\n        if (res) {\n            console.log(res);\n            const startIdx = res.indexOf('{');\n            const endIdx = res.lastIndexOf('}');\n            const trimmedString = res.slice(startIdx, endIdx + 1);\n            const parsedBlock=JSON.parse(trimmedString);\n            if(!parsedBlock.isPokemon) return new Response('No pokemon Detected!', { status: 400 });\n            // Upload the image to Supabase bucket named 'photos'\n            const { data:exsitingPokemon, error } = await supabase\n                .from(\"pokemons\")\n                .select(\"*\")\n                .eq(\"name\", parsedBlock.name) // Match by Pokémon name\n                .eq(\"user_id\", user.id) // Match by user ID\n                .single();\n            if(exsitingPokemon){\n                const body=JSON.parse(exsitingPokemon.body);\n                return new Response(JSON.stringify({...body ,id:exsitingPokemon.id }), {\n                status: 200,\n                headers: { 'Content-Type': 'application/json' },\n            })}\n            const fileName = Date.now().toString(); // Use a unique filename\n            const { data: uploadData, error: uploadError } = await supabase\n                .storage\n                .from('photos')\n                .upload(fileName, fileBuffer, {\n                    contentType: file.type,\n                });\n\n            if (uploadError) {\n                console.error('Error uploading to Supabase:', uploadError);\n                return new Response('Error uploading to Supabase', { status: 500 });\n            }\n\n            console.log('File uploaded to Supabase:', uploadData);\n\n            // Get the public URL of the uploaded file\n            const { data: urlData } = supabase\n                .storage\n                .from('photos')\n                .getPublicUrl(fileName);\n\n            const imageUrl = urlData.publicUrl;\n            console.log('imageUrl:', imageUrl);\n            console.log('userId:', userId);\n\n            // Insert a new row into the `pokemons` table\n            const { data: insertData, error: insertError } = await supabase\n                .from('pokemons')\n                .insert([\n                    {\n                        user_id: userId,\n                        url: fileName, // Store the filename (or full URL if needed)\n                        body: trimmedString,\n                        name:parsedBlock.name\n                    },\n                ]).select();\n\n            if (insertError) {\n                console.error('Error inserting into Supabase:', insertError);\n                return new Response('Error inserting into Supabase', { status: 500 });\n            }\n\n            console.log('Row inserted into Supabase:', insertData);\n\n            // Combine the Gemini response with the image URL\n            const combinedResponse = {\n                ...JSON.parse(trimmedString),\n                url: imageUrl, // Add the image URL to the response\n            };\n\n            return new Response(JSON.stringify({ ...combinedResponse,id:insertData[0].id }), {\n                status: 200,\n                headers: { 'Content-Type': 'application/json' },\n            });\n        }\n        return new Response(\"Some error occurred\", { status: 400 });\n\n    } catch (error: any) {\n        console.log(error);\n        return new Response(error.message, { status: 500 });\n    }\n}"],"names":[],"mappings":"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","debugId":null}}]
}
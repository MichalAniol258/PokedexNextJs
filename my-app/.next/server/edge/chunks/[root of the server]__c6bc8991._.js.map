{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/utils/supabase/server.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n    const cookieStore = await cookies()\n\n    return createServerClient(\n        process.env.NEXT_PUBLIC_SUPABASE_URL!,\n        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n        {\n            cookies: {\n                getAll() {\n                    return cookieStore.getAll()\n                },\n                setAll(cookiesToSet) {\n                    try {\n                        cookiesToSet.forEach(({ name, value, options }) =>\n                            cookieStore.set(name, value, options)\n                        )\n                    } catch {\n                        // The `setAll` method was called from a Server Component.\n                        // This can be ignored if you have middleware refreshing\n                        // user sessions.\n                    }\n                },\n            },\n        }\n    )\n}"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,eAAe;IAClB,MAAM,cAAc,MAAM,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,iLAAA,CAAA,qBAAkB,AAAD,sUAGpB;QACI,SAAS;YACL;gBACI,OAAO,YAAY,MAAM;YAC7B;YACA,QAAO,YAAY;gBACf,IAAI;oBACA,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC1C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAErC,EAAE,OAAM;gBACJ,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACrB;YACJ;QACJ;IACJ;AAER"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import {NextRequest, NextResponse} from 'next/server';\nimport { createClient } from './utils/supabase/server';\n\nexport async function middleware(req:NextRequest) {\n    const res = NextResponse.next();\n    const supabase=await createClient();\n    const { data } = await supabase.auth.getSession();\n    const publicRoutes = [\"/login\", \"/register\",\"/\",\"/resetPassword\"];\n    const isPublicRoute = publicRoutes.some((route) =>\n        new RegExp(`^${route}$`).test(req.nextUrl.pathname)\n    );    if (!data.session && !isPublicRoute) {\n        return NextResponse.redirect(new URL(\"/login\", req.url));\n    }\n    return res;\n}\nexport const config = {\n    matcher: [\"/((?!_next/static|_next/image|favicon.ico).*)\"],\n};"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,eAAe,WAAW,GAAe;IAC5C,MAAM,MAAM,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC7B,MAAM,WAAS,MAAM,CAAA,GAAA,0IAAA,CAAA,eAAY,AAAD;IAChC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU;IAC/C,MAAM,eAAe;QAAC;QAAU;QAAY;QAAI;KAAiB;IACjE,MAAM,gBAAgB,aAAa,IAAI,CAAC,CAAC,QACrC,IAAI,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,OAAO,CAAC,QAAQ;IAChD,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,eAAe;QACvC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;IAC1D;IACA,OAAO;AACX;AACO,MAAM,SAAS;IAClB,SAAS;QAAC;KAAgD;AAC9D"}}]
}